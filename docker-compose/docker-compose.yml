version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: l2scan-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: l2scan
      POSTGRES_USER: l2scan
      POSTGRES_PASSWORD: l2scan123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U l2scan -d l2scan"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l2scan-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: l2scan-redis
    restart: unless-stopped
    command: redis-server --requirepass redis123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - l2scan-network

  # L2Scan Indexer Service
  indexer:
    image: l2scan/indexer:latest
    container_name: l2scan-indexer
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://l2scan:l2scan123@postgres:5432/l2scan
      - REDIS_URL=redis://:redis123@redis:6379
      - RPC_URL=${RPC_URL:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CHAIN_ID=${CHAIN_ID:-1}
      - START_BLOCK=${START_BLOCK:-0}
      - BATCH_SIZE=${BATCH_SIZE:-100}
      - WORKER_COUNT=${WORKER_COUNT:-4}
    volumes:
      - indexer_data:/app/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l2scan-network

  # L2Scan Frontend Service
  frontend:
    image: l2scan/frontend:latest
    container_name: l2scan-frontend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://l2scan:l2scan123@postgres:5432/l2scan
      - REDIS_URL=redis://:redis123@redis:6379
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
      - NEXT_PUBLIC_CHAIN=${NEXT_PUBLIC_CHAIN:-1}
      - NEXT_PUBLIC_NOVU_BACKEND_URL=${NEXT_PUBLIC_NOVU_BACKEND_URL:-https://api-novu.unifra.io}
      - NEXT_PUBLIC_NOVU_SOCKET_URL=${NEXT_PUBLIC_NOVU_SOCKET_URL:-https://ws-novu.unifra.io}
      - NODE_ENV=production
    volumes:
      - frontend_data:/app/data
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      indexer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l2scan-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: l2scan-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - indexer
    networks:
      - l2scan-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  indexer_data:
    driver: local
  frontend_data:
    driver: local

networks:
  l2scan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16