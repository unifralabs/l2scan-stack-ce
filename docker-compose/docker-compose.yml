version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: l2scan-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: l2scan
      POSTGRES_USER: l2scan
      POSTGRES_PASSWORD: l2scan123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U l2scan -d l2scan"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l2scan-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: l2scan-redis
    restart: unless-stopped
    command: redis-server --requirepass redis123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - l2scan-network

  # Database Migration Service (Init Container pattern)
  db-migrate:
    image: ghcr.io/unifralabs/l2scan-ce-init:v0.0.9
    container_name: l2scan-db-migrate
    restart: "no"  # Run only once
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://l2scan:l2scan123@postgres:5432/l2scan}
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - l2scan-network

  # L2Scan Indexer Service
  indexer:
    image: ghcr.io/unifralabs/l2scan-indexer-ce:main
    container_name: l2scan-indexer
    restart: unless-stopped
    environment:
      # - L1_RPC=${L1_RPC:-}
      - L2_RPC=${L2_RPC:-}
      - PGDSN=${PGDSN:-postgresql://l2scan:l2scan123@postgres:5432/l2scan}
      - WORKER=${WORKER:-1}
      # - L1_FORCE_START_BLOCK=${L1_FORCE_START_BLOCK:-}
      # - L2_FORCE_START_BLOCK=${L2_FORCE_START_BLOCK:-}
      # - CHECK_MISMATCHED_BLOCKS=${CHECK_MISMATCHED_BLOCKS:-}
      - CMC_API_KEY=${CMC_API_KEY:-}
    volumes:
      - indexer_data:/app/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - l2scan-network

  # Smart Contract Verifier Service
  verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:v1.10.0
    container_name: l2scan-verifier
    restart: unless-stopped
    environment:
      - SMART_CONTRACT_VERIFIER__CONFIG=/app/config.toml
    volumes:
      - ./smart-contract-verifier/config.toml:/app/config.toml
      - verifier_compilers:/tmp/compilers
    ports:
      - "8050:8050"
      - "8051:8051"
    networks:
      - l2scan-network

  # L2Scan App Service
  app:
    image: ghcr.io/unifralabs/l2scan-ce:v0.0.9
    container_name: l2scan-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://l2scan:l2scan123@postgres:5432/l2scan}
      - REDIS_URL=${REDIS_URL:-redis://:redis123@redis:6379}
      - CHAIN_RPC_URL=${CHAIN_RPC_URL:-}
      - VERIFICATION_URL=${VERIFICATION_URL:-http://verifier:8050}
      - NODE_ENV=${NODE_ENV:-production}
      # Optional branding configuration
      - BRAND_NAME=${BRAND_NAME:-}
      - BRAND_TITLE=${BRAND_TITLE:-}
      - BRAND_DESCRIPTION=${BRAND_DESCRIPTION:-}
      - BRAND_LOGO=${BRAND_LOGO:-}
      - BRAND_LOGO_DARK=${BRAND_LOGO_DARK:-}
      # Optional chain configuration
      - CHAIN_ID=${CHAIN_ID:-}
      - CHAIN_BLOCK_EXPLORER_URL=${CHAIN_BLOCK_EXPLORER_URL:-}
      - CHAIN_CURRENCY_NAME=${CHAIN_CURRENCY_NAME:-}
      - CHAIN_CURRENCY_SYMBOL=${CHAIN_CURRENCY_SYMBOL:-}
      - CHAIN_CURRENCY_DECIMALS=${CHAIN_CURRENCY_DECIMALS:-}
    volumes:
      - app_data:/app/data
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
      verifier:
        condition: service_started
    networks:
      - l2scan-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  indexer_data:
    driver: local
  app_data:
    driver: local
  verifier_compilers:
    driver: local

networks:
  l2scan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16