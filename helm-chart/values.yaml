# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# L2Scan App configuration
app:
  enabled: true
  image:
    registry: ghcr.io
    repository: unifralabs/l2scan-ce
    tag: "main"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Database initialization container
  initContainer:
    enabled: true
    image: ghcr.io/unifralabs/l2scan-ce-init
    tag: main
    pullPolicy: IfNotPresent
    nodeEnv: production
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
  
  replicaCount: 1  # App supports multiple replicas, but single replica is recommended for most deployments
  
  env:
    DATABASE_URL: ""  # Will be automatically generated if using internal PostgreSQL
    RPC: ""
    REDIS_URL: ""     # Will be automatically generated if using internal Redis
    VERIFICATION_URL: ""  # Will be automatically generated if using internal verifier
    NODE_ENV: "production"
    
  envFrom: []
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
    
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: l2scan.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    
  healthCheck:
    enabled: false  # Disabled by default as app doesn't expose /api/health endpoint
    path: /api/health
    initialDelaySeconds: 30
    periodSeconds: 10
    
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 10Gi
    
  securityContext:
    runAsNonRoot: false  # Allow root access for Prisma client generation in init container
    runAsUser: 0
    fsGroup: 1001

# L2Scan Indexer configuration  
indexer:
  enabled: true
  image:
    registry: ghcr.io
    repository: unifralabs/l2scan-indexer-ce
    tag: "main"
    pullPolicy: IfNotPresent
    pullSecrets: []
    
  replicaCount: 1  # IMPORTANT: Indexer does NOT support multiple replicas - must be 1
  
  env:
    # L1_RPC: ""
    L2_RPC: ""
    PGDSN: ""  # Will be automatically generated if using internal PostgreSQL
    WORKER: "1"
    # L1_FORCE_START_BLOCK: ""
    # L2_FORCE_START_BLOCK: ""
    # CHECK_MISMATCHED_BLOCKS: ""
    CMC_API_KEY: ""
    
  envFrom: []
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    annotations: {}
    
  healthCheck:
    enabled: false  # Disabled by default as indexer doesn't expose /health endpoint
    path: /health
    initialDelaySeconds: 60
    periodSeconds: 30
    
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 20Gi
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001

# Smart Contract Verifier configuration
verifier:
  enabled: true
  image:
    registry: ghcr.io
    repository: blockscout/smart-contract-verifier
    tag: "v1.10.0"
    pullPolicy: IfNotPresent
    pullSecrets: []
    
  replicaCount: 1
  
  config:
    maxThreads: 8
    
  env: []
  envFrom: []
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
      
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  service:
    type: ClusterIP
    port: 8050
    grpcPort: 8051
    annotations: {}
    
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 50Gi
    storageClass: ""
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
    
  podSecurityContext:
    runAsUser: 1001
    fsGroup: 1001
    
  podAnnotations: {}
  imagePullSecrets: []
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

# PostgreSQL configuration (using Bitnami chart)
l2scan-postgresql:
  enabled: true
  auth:
    postgresPassword: "l2scan123"
    username: "l2scan"
    password: "l2scan123" 
    database: "l2scan"
  primary:
    persistence:
      enabled: true
      size: 100Gi
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 1Gi
  metrics:
    enabled: false

# Redis configuration (using Bitnami chart)
l2scan-redis:
  enabled: true
  auth:
    enabled: true
    password: "redis123"
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
  replica:
    replicaCount: 0  # Single Redis instance is sufficient for most deployments
  metrics:
    enabled: false

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Policy  
podSecurityPolicy:
  enabled: false

# Network Policy
networkPolicy:
  enabled: false
  ingress:
    from: []
  egress:
    to: []

# RBAC
rbac:
  create: true

# Common labels
commonLabels: {}

# Common annotations  
commonAnnotations: {}